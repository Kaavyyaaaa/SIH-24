*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;

}


.container {
    position: relative;
    height: 100vh;
   }

.container h1{
   font-size: 40px;
   font-weight: normal;
   padding: 15px ;
   color:#333;
   text-align: center;
}
 .container .gallery {
    display: flex;
    flex-wrap: wrap;
    grid-gap:30px;
    justify-content: center;
    padding: 10px;
    
}

.container .gallery .image{
    height:250px;
    width:350px;
    border:10px solid #fff;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    overflow: hidden;
    cursor: pointer;

}

.container .gallery .image img{
    height:100%;
    width:100%;
    object-fit: cover;}

    .container .gallery .image:hover img {
        transform: scale(1.1);
        transition: 0.9s ease;
}

.modal{
    display: none;
    position:fixed;
    z-index:1;
    left:0;
    top:0;
    width:100%;
    height:100%;
    overflow:auto;
    background-color: rgba(0,0,0,0.8);
    padding-top:50px;
}

.modal .MyImages {
    display: block;
    margin: 0 auto;
    max-width: 80%;
    max-height: 80%;
    object-fit: contain;
}

@keyframes zoom{
    from{transform:scale(0)}
    to{transform: scale(1);}
}
/*This @keyframes rule defines a zoom animation that scales an element from a smaller size to its normal size, creating a zoom-in effect.

@keyframes: This keyword is used to define the animation. The name of the animation is zoom.
from: This defines the starting point of the animation. At the start (from), the element is scaled to 0 (invisible and tiny) using transform: scale(0).
to: This defines the ending point of the animation. At the end (to), the element is scaled to its normal size using transform: scale(1).*/

.modal .close{
    position:absolute;
    top: 15px;
    right:35px;
    color:black;
    font-weight: bold;
    font-size:40px;
    transition:0.3s;
}

.modal .close:hover,
.close:focus{
    color:#bbb;
    text-decoration: none;
    cursor: pointer;
}

